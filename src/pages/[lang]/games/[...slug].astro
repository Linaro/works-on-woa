---
import { type CollectionEntry, getCollection } from "astro:content";
import ProjectLayout from "../../../layouts/ProjectLayout.astro";
import { exec } from "node:child_process";
import { promisify } from "node:util";
import { getEntry } from "astro:content";
import i18next from "i18next";
import { LOCALES } from "../../../config/i18nConfig";

const execAsync = promisify(exec);

export async function getStaticPaths() {
  const projects = await getCollection("games");
  return LOCALES.flatMap(locale =>
    projects.map(project => ({
      params: { lang: locale, slug: project.slug },
      props: project,
    }))
  );
}

const { slug } = Astro.params;

let date: Date | null = null;

const reports = await getCollection("user_reports_games", ({ data }: any) => {
  return data.game.slug === slug;
});

type Props = CollectionEntry<"games">;
let project;
if (!import.meta.env.IS_PUBLIC) {
  project = await getEntry("games", slug);
} else {
  project = Astro.props;
  try {
    const { stdout } = await execAsync(
      `git log -1 --pretty="format:%ci" -- "${process.cwd()}/src/content/games/${project.id}"`
    );
    if (stdout == "") {
      throw new Error(`Failed to retrieve date for ${process.cwd()}/src/content/games/${project.id}`);
    }
    date = new Date(stdout);
  } catch (e) {
    throw new Error(`Failed to parse date for ${project.id}.\n${e}`);
  }
}
---

<ProjectLayout project={project} date={date} reports={reports} type="games" />
